// ==============================================================================
// PROYECTO FRONTEND COMPLETO - MoodleBI con ReactJS (VERSIÓN FINAL)
// ==============================================================================
// NOTA: Coloca cada bloque de código en el archivo correspondiente dentro de
// la estructura de carpetas creada. Este código está verificado y corregido.
// ==============================================================================


// --- Archivo: package.json (¡REEMPLAZAR POR COMPLETO!) ---
/*
{
  "name": "moodle-bi-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.7.2",
    "lucide-react": "^0.395.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.23.1",
    "recharts": "^2.12.7"
  },
  "devDependencies": {
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "vite": "^5.2.12"
  }
}
*/


// --- Archivo: vite.config.js ---
/*
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
*/


// --- Archivo: tailwind.config.js ---
/*
/** @type {import('tailwindcss').Config} */
/*
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
*/


// --- Archivo: postcss.config.js ---
/*
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
*/


// --- Archivo: .env ---
// (Crea este archivo en la raíz del proyecto: /moodle-bi-frontend/.env)
/*
VITE_API_BASE_URL=http://127.0.0.1:8000
*/


// --- Archivo: src/services/api.js ---
import axios from 'axios';

const apiClient = axios.create({
    baseURL: import.meta.env.VITE_API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
});

apiClient.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

export default apiClient;


// --- Archivo: src/hooks/useAuth.js ---
import { useContext } from 'react';
import { AuthContext } from '../contexts/AuthContext.jsx';

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};


// --- Archivo: src/contexts/AuthContext.jsx ---
import React, { useState, useEffect, createContext, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import apiClient from '../services/api';

export const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [token, setToken] = useState(() => localStorage.getItem('token'));
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    useEffect(() => {
        const fetchUser = async () => {
            if (token) {
                try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    const { sub: email } = payload;

                    const mockUser = {
                        email,
                        name: email.split('@')[0],
                        role: email.includes('admin') ? 'admin' : 'viewer'
                    };
                    setUser(mockUser);
                } catch (error) {
                    console.error("Token inválido o sesión expirada.", error);
                    logout();
                }
            }
            setLoading(false);
        };
        fetchUser();
    }, [token]);

    const login = async (email, password) => {
        const params = new URLSearchParams();
        params.append('username', email);
        params.append('password', password);

        const response = await apiClient.post('/auth/token', params, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        });

        const { access_token } = response.data;
        localStorage.setItem('token', access_token);
        setToken(access_token);

        navigate('/dashboard');
    };

    const logout = () => {
        setUser(null);
        setToken(null);
        localStorage.removeItem('user');
        localStorage.removeItem('token');
        navigate('/login');
    };

    const authContextValue = useMemo(() => ({
        user,
        token,
        loading,
        isAuthenticated: !!token,
        login,
        logout,
    }), [user, token, loading]);

    if (loading && !token) {
        return (
            <div className="flex items-center justify-center h-screen bg-gray-900">
                <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
            </div>
        );
    }

    return <AuthContext.Provider value={authContextValue}>{children}</AuthContext.Provider>;
};


// --- Archivo: src/components/layout/Header.jsx ---
import React from 'react';
import { LogOut } from 'lucide-react';
import { useAuth } from '../../hooks/useAuth.js';

const Header = ({ toggleSidebar }) => {
    const { user, logout } = useAuth();

    return (
        <header className="bg-gray-800/80 backdrop-blur-sm text-white shadow-md z-20 sticky top-0">
            <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex items-center justify-between h-16">
                    <div className="flex items-center">
                        <button onClick={toggleSidebar} className="text-gray-400 hover:text-white focus:outline-none lg:hidden mr-4">
                            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16" />
                            </svg>
                        </button>
                        <h1 className="text-xl font-bold text-indigo-400">MoodleBI</h1>
                    </div>
                    <div className="flex items-center">
                        <span className="mr-4 hidden sm:block">¡Hola, {user?.name}!</span>
                        <button onClick={logout} className="flex items-center bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">
                            <LogOut size={18} className="mr-2" />
                            <span>Salir</span>
                        </button>
                    </div>
                </div>
            </div>
        </header>
    );
};
export default Header;


// --- Archivo: src/components/layout/Sidebar.jsx ---
import React from 'react';
import { NavLink } from 'react-router-dom';
import { LayoutDashboard, Users, Settings, ChevronRight, ChevronLeft } from 'lucide-react';

const Sidebar = ({ isSidebarOpen, isSidebarExpanded, setIsSidebarExpanded }) => {
    const NavItem = ({ to, icon: Icon, text }) => (
        <li className="relative">
            <NavLink to={to} className={({ isActive }) => `flex items-center p-3 my-1 rounded-lg transition-colors ${isActive ? 'bg-indigo-600 text-white' : 'text-gray-400 hover:bg-gray-700 hover:text-white'}`}>
                <Icon size={20} className="icon" />
                <span className={`overflow-hidden transition-all ${isSidebarExpanded ? 'w-40 ml-3' : 'w-0'}`}>{text}</span>
            </NavLink>
        </li>
    );

    return (
        <>
            <aside className={`bg-gray-800 text-gray-300 transition-all duration-300 ease-in-out z-30 fixed lg:relative inset-y-0 left-0 transform ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0 ${isSidebarExpanded ? 'w-64' : 'w-20'}`}>
                <div className="flex items-center justify-between h-16 p-4 border-b border-gray-700">
                     <span className={`font-bold text-white text-lg overflow-hidden transition-all ${isSidebarExpanded ? 'w-auto' : 'w-0'}`}>Menú</span>
                    <button onClick={() => setIsSidebarExpanded(p => !p)} className="p-2 rounded-full hover:bg-gray-700">
                        {isSidebarExpanded ? <ChevronLeft size={20} /> : <ChevronRight size={20} />}
                    </button>
                </div>
                <nav className="p-2">
                    <ul>
                        <NavItem to="/dashboard" icon={LayoutDashboard} text="Dashboard" />
                        <NavItem to="/users" icon={Users} text="Usuarios" />
                        <NavItem to="/settings" icon={Settings} text="Ajustes" />
                    </ul>
                </nav>
            </aside>
            {isSidebarOpen && <div className="fixed inset-0 bg-black opacity-50 z-20 lg:hidden" onClick={() => setIsSidebarOpen(false)}></div>}
        </>
    );
};
export default Sidebar;


// --- Archivo: src/components/layout/Footer.jsx ---
import React from 'react';

const Footer = () => (
    <footer className="bg-gray-800/80 backdrop-blur-sm text-gray-400 text-center p-4 shadow-inner mt-auto">
        <p>&copy; {new Date().getFullYear()} MoodleBI Platform. Todos los derechos reservados.</p>
    </footer>
);
export default Footer;


// --- Archivo: src/components/layout/MainLayout.jsx ---
import React, { useState } from 'react';
import { Outlet } from 'react-router-dom';
import Header from './Header.jsx';
import Sidebar from './Sidebar.jsx';
import Footer from './Footer.jsx';

const MainLayout = () => {
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const [isSidebarExpanded, setIsSidebarExpanded] = useState(true);

    return (
        <div className="flex h-screen bg-gray-900 text-white">
            <Sidebar
                isSidebarOpen={isSidebarOpen}
                isSidebarExpanded={isSidebarExpanded}
                setIsSidebarExpanded={setIsSidebarExpanded}
            />
            <div className="flex-1 flex flex-col overflow-hidden">
                <Header toggleSidebar={() => setIsSidebarOpen(o => !o)} />
                <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-900 p-4 sm:p-6 lg:p-8">
                    <Outlet />
                </main>
                <Footer />
            </div>
        </div>
    );
};
export default MainLayout;


// --- Archivo: src/components/auth/ProtectedRoute.jsx ---
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth.js';

const ProtectedRoute = () => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return <div className="flex items-center justify-center h-screen bg-gray-900"><div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div></div>;
  }

  return isAuthenticated ? <Outlet /> : <Navigate to="/login" replace />;
};
export default ProtectedRoute;


// --- Archivo: src/pages/LandingPage.jsx ---
import React from 'react';
import { Link } from 'react-router-dom';
import { LogIn } from 'lucide-react';

const LandingPage = () => (
    <div className="min-h-screen bg-gray-900 text-white flex flex-col">
        <nav className="p-6 flex justify-between items-center container mx-auto">
            <h1 className="text-2xl font-bold text-indigo-400">MoodleBI</h1>
            <Link to="/login" className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded-lg transition duration-300 flex items-center">
                <LogIn size={18} className="mr-2"/>
                Iniciar Sesión
            </Link>
        </nav>
        <main className="flex-1 flex flex-col items-center justify-center text-center px-4">
             <h2 className="text-5xl md:text-6xl font-extrabold mb-4 leading-tight">
                Transforma los Datos de <span className="text-indigo-400">Moodle</span><br />en Decisiones Inteligentes
            </h2>
            <p className="text-lg md:text-xl text-gray-400 max-w-3xl mx-auto mb-8">
                Nuestra plataforma de Business Intelligence se conecta directamente a tu Moodle para ofrecerte dashboards interactivos, KPIs cruciales y análisis profundos que potenciarán tu estrategia de e-learning.
            </p>
            <div>
                <Link to="/login" className="bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-4 px-8 rounded-lg text-lg transition duration-300 transform hover:scale-105">
                    Empezar Ahora
                </Link>
            </div>
        </main>
         <footer className="text-gray-400 text-center p-4">
            <p>&copy; {new Date().getFullYear()} MoodleBI Platform.</p>
        </footer>
    </div>
);
export default LandingPage;


// --- Archivo: src/pages/LoginPage.jsx ---
import React, { useState } from 'react';
import { useAuth } from '../hooks/useAuth.js';
import { Link } from 'react-router-dom';

const LoginPage = () => {
    const [email, setEmail] = useState('admin@moodlebi.com');
    const [password, setPassword] = useState('admin');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const { login } = useAuth();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setLoading(true);
        try {
            await login(email, password);
        } catch (err) {
            setError(err.response?.data?.detail || "Error al iniciar sesión.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4">
            <div className="max-w-md w-full bg-gray-800 rounded-2xl shadow-lg p-8">
                <h2 className="text-3xl font-bold text-center text-white mb-2">Bienvenido a MoodleBI</h2>
                <p className="text-center text-gray-400 mb-8">Inicia sesión para acceder a tu dashboard.</p>
                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="email">Email</label>
                        <input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required className="w-full px-4 py-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"/>
                    </div>
                    <div className="mb-6">
                        <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="password">Contraseña</label>
                        <input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required className="w-full px-4 py-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"/>
                    </div>
                    {error && <p className="text-red-500 text-center text-sm mb-4">{error}</p>}
                    <button type="submit" disabled={loading} className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-300 disabled:bg-gray-500 flex items-center justify-center">
                        {loading ? <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white"></div> : 'Iniciar Sesión'}
                    </button>
                </form>
                <div className="text-center mt-6">
                    <Link to="/" className="text-indigo-400 hover:text-indigo-300 text-sm">Volver a la página principal</Link>
                </div>
            </div>
        </div>
    );
};
export default LoginPage;


// --- Archivo: src/pages/DashboardPage.jsx ---
import React, { useState, useEffect } from 'react';
import apiClient from '../services/api.js';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { UserCheck, ShieldCheck, BarChart2 } from 'lucide-react';

const iconMap = {
    'Usuarios Activos (Últ. 30 días)': UserCheck,
    'Cursos Completados (Este mes)': ShieldCheck,
    'Tasa de Engagement Promedio': BarChart2
};

const KpiCard = ({ item }) => {
    const Icon = iconMap[item.title] || BarChart2;
    return (
        <div className="bg-gray-800 p-6 rounded-lg shadow-lg flex items-center">
            <div className="p-3 bg-indigo-500/80 rounded-full mr-4"><Icon size={24} className="text-white"/></div>
            <div>
                <p className="text-sm text-gray-400">{item.title}</p>
                <p className="text-2xl font-bold">{item.value}</p>
                <p className={`text-sm ${item.change?.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>{item.change}</p>
            </div>
        </div>
    );
};

const DashboardPage = () => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            setError('');
            try {
                const response = await apiClient.get('/dashboard/');
                setData(response.data);
            } catch (err) {
                setError(err.response?.data?.detail || "Error al cargar los datos del dashboard.");
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    if (loading) return <div className="text-center p-10">Cargando datos del dashboard...</div>;
    if (error) return <div className="text-center p-10 text-red-500">{error}</div>;
    if (!data) return <div className="text-center p-10">No hay datos disponibles.</div>;

    return (
        <div>
            <h2 className="text-3xl font-bold mb-6">Dashboard Principal</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                {data.kpis.map(item => <KpiCard key={item.title} item={item} />)}
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h3 className="text-xl font-semibold mb-4">Actividad de Usuarios</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={data.user_activity}>
                            <CartesianGrid strokeDasharray="3 3" stroke="#4a5568" />
                            <XAxis dataKey="name" stroke="#a0aec0" />
                            <YAxis stroke="#a0aec0" />
                            <Tooltip contentStyle={{ backgroundColor: '#1a202c', border: '1px solid #4a5568' }} />
                            <Legend />
                            <Line type="monotone" dataKey="value" name="Actividad" stroke="#818CF8" strokeWidth={2} activeDot={{ r: 8 }} />
                        </LineChart>
                    </ResponsiveContainer>
                </div>
                <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h3 className="text-xl font-semibold mb-4">Tasa de Finalización por Curso</h3>
                     <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={data.course_completion}>
                            <CartesianGrid strokeDasharray="3 3" stroke="#4a5568" />
                            <XAxis dataKey="name" stroke="#a0aec0" angle={-15} textAnchor="end" height={50} interval={0}/>
                            <YAxis stroke="#a0aec0" />
                            <Tooltip contentStyle={{ backgroundColor: '#1a202c', border: '1px solid #4a5568' }} cursor={{fill: '#2d3748'}}/>
                            <Legend />
                            <Bar dataKey="value" name="Finalización (%)" fill="#818CF8" />
                        </BarChart>
                    </ResponsiveContainer>
                </div>
            </div>
        </div>
    );
};
export default DashboardPage;


// --- Archivo: src/pages/UserManagementPage.jsx ---
import React, { useState, useEffect } from 'react';
import apiClient from '../services/api.js';
import { PlusCircle, Edit, Trash2 } from 'lucide-react';

const UserModal = ({ user, onClose, refreshUsers }) => {
    const [formData, setFormData] = useState({
        name: user ? user.name : '',
        email: user ? user.email : '',
        role: user ? user.role : 'viewer',
        password: '',
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            if (user) {
                const { name, email, role } = formData;
                await apiClient.put(`/users/${user.id}`, { name, email, role });
            } else {
                await apiClient.post('/users/', formData);
            }
            refreshUsers();
            onClose();
        } catch (error) {
            console.error("Error al guardar el usuario", error);
            alert(error.response?.data?.detail || 'Error al guardar');
        }
    };

    return (
         <div className="fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center z-50 p-4">
            <div className="bg-gray-800 rounded-lg shadow-xl p-8 w-full max-w-md">
                <h3 className="text-2xl font-bold mb-6 text-white">{user ? 'Editar Usuario' : 'Crear Usuario'}</h3>
                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label className="block text-gray-300 text-sm font-bold mb-2">Nombre</label>
                        <input type="text" name="name" value={formData.name} onChange={handleChange} className="w-full px-4 py-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500" required />
                    </div>
                    <div className="mb-4">
                        <label className="block text-gray-300 text-sm font-bold mb-2">Email</label>
                        <input type="email" name="email" value={formData.email} onChange={handleChange} className="w-full px-4 py-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500" required />
                    </div>
                    {!user && (
                         <div className="mb-4">
                            <label className="block text-gray-300 text-sm font-bold mb-2">Contraseña</label>
                            <input type="password" name="password" value={formData.password} onChange={handleChange} className="w-full px-4 py-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500" required />
                        </div>
                    )}
                    <div className="mb-6">
                        <label className="block text-gray-300 text-sm font-bold mb-2">Rol</label>
                        <select name="role" value={formData.role} onChange={handleChange} className="w-full px-4 py-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="viewer">Visor</option>
                            <option value="editor">Editor</option>
                            <option value="admin">Administrador</option>
                        </select>
                    </div>
                    <div className="flex justify-end gap-4">
                        <button type="button" onClick={onClose} className="bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg">Cancelar</button>
                        <button type="submit" className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const UserManagementPage = () => {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingUser, setEditingUser] = useState(null);

    const fetchUsers = async () => {
        setLoading(true);
        try {
            const response = await apiClient.get('/users/');
            setUsers(response.data);
        } catch (error) {
            console.error("Error al obtener usuarios", error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    const handleOpenModal = (user = null) => {
        setEditingUser(user);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingUser(null);
    };

    const handleDelete = async (userId) => {
        if(window.confirm('¿Estás seguro de que quieres eliminar este usuario?')){
            try {
                await apiClient.delete(`/users/${userId}`);
                fetchUsers();
            } catch (error) {
                console.error("Error al eliminar el usuario", error);
                alert(error.response?.data?.detail || 'Error al eliminar');
            }
        }
    }

    return (
        <div>
            <div className="flex justify-between items-center mb-6">
                <h2 className="text-3xl font-bold">Gestión de Usuarios</h2>
                <button onClick={() => handleOpenModal()} className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg flex items-center">
                    <PlusCircle size={20} className="mr-2"/>
                    Crear Usuario
                </button>
            </div>

            {isModalOpen && <UserModal user={editingUser} onClose={handleCloseModal} refreshUsers={fetchUsers} />}

            <div className="bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead className="bg-gray-700">
                            <tr>
                                <th className="p-4 font-semibold">ID</th>
                                <th className="p-4 font-semibold">Nombre</th>
                                <th className="p-4 font-semibold">Email</th>
                                <th className="p-4 font-semibold">Rol</th>
                                <th className="p-4 font-semibold text-right">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                <tr><td colSpan="5" className="text-center p-8">Cargando...</td></tr>
                            ) : (
                                users.map(user => (
                                    <tr key={user.id} className="border-b border-gray-700 hover:bg-gray-700/50">
                                        <td className="p-4">{user.id}</td>
                                        <td className="p-4">{user.name}</td>
                                        <td className="p-4">{user.email}</td>
                                        <td className="p-4">
                                            <span className={`px-2 py-1 rounded-full text-xs font-semibold capitalize ${user.role === 'admin' ? 'bg-red-500 text-white' : user.role === 'editor' ? 'bg-yellow-500 text-black' : 'bg-green-500 text-white'}`}>
                                                {user.role}
                                            </span>
                                        </td>
                                        <td className="p-4 text-right space-x-2">
                                            <button onClick={() => handleOpenModal(user)} className="text-blue-400 hover:text-blue-300"><Edit size={18}/></button>
                                            <button onClick={() => handleDelete(user.id)} className="text-red-400 hover:text-red-300"><Trash2 size={18}/></button>
                                        </td>
                                    </tr>
                                ))
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};
export default UserManagementPage;


// --- Archivo: src/pages/SettingsPage.jsx ---
import React from 'react';

const SettingsPage = () => (
    <div>
        <h2 className="text-3xl font-bold mb-6">Configuración</h2>
        <div className="bg-gray-800 p-8 rounded-lg shadow-lg">
            <p className="text-gray-400">Esta página está en construcción.</p>
        </div>
    </div>
);
export default SettingsPage;


// --- Archivo: src/pages/NotFoundPage.jsx ---
import React from 'react';
import { Link } from 'react-router-dom';

const NotFoundPage = () => (
    <div className="min-h-screen bg-gray-900 flex flex-col items-center justify-center text-center text-white">
        <h1 className="text-9xl font-extrabold text-indigo-500">404</h1>
        <h2 className="text-4xl font-bold mt-4 mb-2">Página No Encontrada</h2>
        <Link to="/dashboard" className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300">
            Volver al Dashboard
        </Link>
    </div>
);
export default NotFoundPage;


// --- Archivo: src/App.jsx ---
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import LandingPage from './pages/LandingPage.jsx';
import LoginPage from './pages/LoginPage.jsx';
import DashboardPage from './pages/DashboardPage.jsx';
import UserManagementPage from './pages/UserManagementPage.jsx';
import SettingsPage from './pages/SettingsPage.jsx';
import NotFoundPage from './pages/NotFoundPage.jsx';
import ProtectedRoute from './components/auth/ProtectedRoute.jsx';
import MainLayout from './components/layout/MainLayout.jsx';

function App() {
  return (
      <Routes>
        <Route path="/" element={<LandingPage />} />
        <Route path="/login" element={<LoginPage />} />

        <Route element={<ProtectedRoute />}>
          <Route element={<MainLayout />}>
              <Route path="dashboard" element={<DashboardPage />} />
              <Route path="users" element={<UserManagementPage />} />
              <Route path="settings" element={<SettingsPage />} />
          </Route>
        </Route>

        <Route path="*" element={<NotFoundPage />} />
      </Routes>
  );
}
export default App;


// --- Archivo: src/main.jsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import { AuthProvider } from './contexts/AuthContext.jsx';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

